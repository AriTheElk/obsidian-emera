import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

const banner =
`/*
Emera for Obsidian
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
    drop: prod ? ["console", "debugger"] : undefined,
    // Our bundle size is quite big, so we'll save a bit memory by minimizing resulting bundle
    minify: prod,
	treeShaking: true,
    define: {
        'process.env.NODE_ENV': JSON.stringify(prod ? "production" : "development"),
    },
	outfile: "main.js",
    metafile: true,
});

if (prod) {
	const result = await context.rebuild();
    fs.writeFileSync('meta.json', JSON.stringify(result.metafile));
	process.exit(0);
} else {
	await context.watch();
}
